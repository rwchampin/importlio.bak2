module.exports="#define GLSLIFY 1\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\nvarying vec2 vUv;\nuniform vec3 uLight;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec3 v_worldPosition;\nfloat PI = 3.141592653589793238;\nfloat getScatter(vec3 cameraPos, vec3 dir, vec3 lightPos, float d) {\n  // light to ray origin\n  vec3 q = cameraPos - lightPos;\n\n  // coefficients\n  float b = dot(dir, q);\n  float c = dot(q, q);\n\n  // evaluate integral\n  float t = c - b*b;\n  float s = 1.0 / sqrt(max(0.0001, t));\n  float l = s * (atan( (d + b) * s) - atan( b*s ));\n\n  return pow(max(0.0, l / 15.), 0.4);\n}\nvoid main()\t{\n\n\tfloat dash = sin(vUv.x*50. + time/3.);\n\n\tif(dash<0.3) discard;\n\n\tvec3 cameraToWorld = v_worldPosition - cameraPosition;\n\tvec3 cameraToWorldDir = normalize(cameraToWorld);\n\tfloat cameraToWorldDistance = length(cameraToWorld);\n\n\tvec3 lightToWorld = normalize(uLight - v_worldPosition);\n\tfloat diffusion = max(0.,dot(vNormal,lightToWorld));\n\tfloat dist = length(uLight - vPosition);\n\n\tfloat scatter = getScatter(cameraPosition,cameraToWorldDir,uLight,cameraToWorldDistance);\n\n\tfloat final = diffusion;\n\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\tgl_FragColor = vec4(1. - dist,0.,0.0,1.);\n\tgl_FragColor = vec4(diffusion,0.,0.0,1.);\n\tgl_FragColor = vec4(scatter,0.,0.0,1.);\n\t// gl_FragColor = vec4(final,0.,0.0,1.);\n\t// gl_FragColor = vec4(vNormal,1.);\n}";